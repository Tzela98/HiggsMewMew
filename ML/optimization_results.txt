Optimization Result:           fun: 0.10442647814023785
            x: [0.0005825793165866494, 72, 1e-05]
    func_vals: [ 1.175e-01  1.109e-01 ...  1.053e-01  1.152e-01]
      x_iters: [[0.0008168886881742098, 99, 0.0007818940902700419], [0.0006371651421518385, 150, 0.00010897516665982288], [0.0005133240027692806, 128, 0.0001514381497427214], [0.0006857996256539677, 75, 0.0007247787845441567], [0.0009446974381141753, 64, 0.0009922894436983057], [0.000655733358664945, 181, 1.6995642167520235e-05], [0.00012075618253727419, 165, 0.00040586236199810304], [0.0001419990968922539, 251, 0.00024044362702600123], [0.00018154579107953873, 183, 0.00038863737135449127], [0.0009849077972261095, 154, 0.0008613410026689576], [0.00011315806252117483, 256, 1e-05], [0.0005825793165866494, 72, 1e-05], [0.0009962844334123497, 128, 0.0003465260762460709], [0.001, 64, 1e-05], [0.00010420001141923268, 64, 1e-05], [0.0009927297695816234, 231, 0.0005443416539234518], [0.00010295837474486254, 119, 0.0009980747352846047], [0.0001178105092144391, 254, 0.0006121856082695975], [0.0009869027426374203, 243, 1.1935293553701296e-05], [0.0001035042532124368, 207, 0.000839851412626287]]
       models: [GaussianProcessRegressor(kernel=1**2 * Matern(length_scale=[1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                                        n_restarts_optimizer=2, noise='gaussian',
                                        normalize_y=True, random_state=1608637542), GaussianProcessRegressor(kernel=1**2 * Matern(length_scale=[1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                                        n_restarts_optimizer=2, noise='gaussian',
                                        normalize_y=True, random_state=1608637542), GaussianProcessRegressor(kernel=1**2 * Matern(length_scale=[1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                                        n_restarts_optimizer=2, noise='gaussian',
                                        normalize_y=True, random_state=1608637542), GaussianProcessRegressor(kernel=1**2 * Matern(length_scale=[1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                                        n_restarts_optimizer=2, noise='gaussian',
                                        normalize_y=True, random_state=1608637542), GaussianProcessRegressor(kernel=1**2 * Matern(length_scale=[1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                                        n_restarts_optimizer=2, noise='gaussian',
                                        normalize_y=True, random_state=1608637542), GaussianProcessRegressor(kernel=1**2 * Matern(length_scale=[1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                                        n_restarts_optimizer=2, noise='gaussian',
                                        normalize_y=True, random_state=1608637542), GaussianProcessRegressor(kernel=1**2 * Matern(length_scale=[1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                                        n_restarts_optimizer=2, noise='gaussian',
                                        normalize_y=True, random_state=1608637542), GaussianProcessRegressor(kernel=1**2 * Matern(length_scale=[1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                                        n_restarts_optimizer=2, noise='gaussian',
                                        normalize_y=True, random_state=1608637542), GaussianProcessRegressor(kernel=1**2 * Matern(length_scale=[1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                                        n_restarts_optimizer=2, noise='gaussian',
                                        normalize_y=True, random_state=1608637542), GaussianProcessRegressor(kernel=1**2 * Matern(length_scale=[1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                                        n_restarts_optimizer=2, noise='gaussian',
                                        normalize_y=True, random_state=1608637542), GaussianProcessRegressor(kernel=1**2 * Matern(length_scale=[1, 1, 1], nu=2.5) + WhiteKernel(noise_level=1),
                                        n_restarts_optimizer=2, noise='gaussian',
                                        normalize_y=True, random_state=1608637542)]
        space: Space([Real(low=0.0001, high=0.001, prior='uniform', transform='normalize'),
                      Integer(low=64, high=256, prior='uniform', transform='normalize'),
                      Real(low=1e-05, high=0.001, prior='uniform', transform='normalize')])
 random_state: RandomState(MT19937)
        specs:     args:                    func: <function objective at 0x7f8176068e50>
                                      dimensions: Space([Real(low=0.0001, high=0.001, prior='uniform', transform='normalize'),
                                                         Integer(low=64, high=256, prior='uniform', transform='normalize'),
                                                         Real(low=1e-05, high=0.001, prior='uniform', transform='normalize')])
                                  base_estimator: GaussianProcessRegressor(kernel=1**2 * Matern(length_scale=[1, 1, 1], nu=2.5),
                                                                           n_restarts_optimizer=2, noise='gaussian',
                                                                           normalize_y=True, random_state=1608637542)
                                         n_calls: 20
                                 n_random_starts: None
                                n_initial_points: 10
                         initial_point_generator: random
                                        acq_func: gp_hedge
                                   acq_optimizer: auto
                                              x0: None
                                              y0: None
                                    random_state: RandomState(MT19937)
                                         verbose: True
                                        callback: None
                                        n_points: 10000
                            n_restarts_optimizer: 5
                                              xi: 0.01
                                           kappa: 1.96
                                          n_jobs: 1
                                model_queue_size: None
                                space_constraint: None
               function: base_minimize
------------------------------------
ATTENTION, THE BEST PARAMETERS ARE: [0.0005825793165866494, 72, 1e-05]
------------------------------------
